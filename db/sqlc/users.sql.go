// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: users.sql

package db

import (
	"context"
	"database/sql"
)

const createUsers = `-- name: CreateUsers :execresult
insert into
    users(username, password)
values
    ( $1, $2)
`

type CreateUsersParams struct {
	Username sql.NullString `json:"username"`
	Password sql.NullString `json:"password"`
}

func (q *Queries) CreateUsers(ctx context.Context, arg CreateUsersParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createUsers, arg.Username, arg.Password)
}

const getAllUsers = `-- name: GetAllUsers :many
select username, password from users
`

func (q *Queries) GetAllUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(&i.Username, &i.Password); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByName = `-- name: GetUserByName :one
select
    username, password
from
    users
where
    username =  $1
`

func (q *Queries) GetUserByName(ctx context.Context, username sql.NullString) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByName, username)
	var i User
	err := row.Scan(&i.Username, &i.Password)
	return i, err
}
